#!groovy

@Library('jenkinslib@master') _

//func from libbrary
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tools()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarqubeapi()

String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String deployHosts = "${env.deployHosts}"

String srcUrl = "${env.srcUrl}"
String branchName = "${env.branchName}"

pipeline{
    agent{ node {label "ryan-jnlp"}}

    stages{

        stage("CheckOut"){
            steps{
                script{
                    tools.PrintMes("获取代码","green")
                    checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '8cb3fc7b-22c6-4b7c-93e5-d0ef15b39aa3', url: "${srcUrl}"]]])

                }
                
            }

        }
        stage("Build"){
            steps{
                script{
                    tools.PrintMes("执行打包","green")
                    build.Build(buildType,buildShell)
                }
            }
        }

        stage("QA"){
            steps{
                script{
                    tools.PrintMes("代码扫描","green")
                    sonar.SonarScan("${JOB_NAME}","${JOB_NAME}","src")
                    tools.PrintMes("获取扫描结果","green")
                    result = sonarapi.GetProjectStatus("${JOB_NAME}")                  
                    
                    println(result)
                    if (result.toString() == "ERROR"){
                        toemail.Email("代码质量阈错误！请及时修复！",userEmail)
                        error " 代码质量阈错误！请及时修复！"        
                    } else {
                        println(result)
                    }
                }
            }
        }
    }
}

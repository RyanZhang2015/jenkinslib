#!groovy

@Library('jenkinslib@master') _

//func from libbrary
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarqubeapi()
def nexus = new org.devops.nexus()
def toemail = new org.devops.toemail()
def artifactory = new org.devops.artifactory()

String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String deployHosts = "${env.deployHosts}"
String srcUrl = "${env.srcUrl}"
String branchName = "${env.branchName}"

if ("${runOpts}" == "GitlabPush"){
    branchName = branch - "refs/heads/"
    currentBuild.description = "Trigger by ${userName} ${branch}"
    gitlab.ChangeCommitStatus(projectId,commitSha,"running")
    env.runOpts = "GitlabPush"
}

pipeline{
    agent{ node {label "ryan-jnlp"}}

    stages{

        stage("CheckOut"){
            steps{
                script{


                    println("${branchName}")

                    tools.PrintMes("获取代码","green")
                    checkout([$class: 'GitSCM', 
                    branches: [[name: "${branchName}"]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[credentialsId: '8cb3fc7b-22c6-4b7c-93e5-d0ef15b39aa3', url: "${srcUrl}"]]])

                }
                
            }

        }
        stage("Build"){
            steps{
                script{
                    tools.PrintMes("执行打包","green")

                    //build.Build(buildType,buildShell)
                    artifactory.main(buildType,buildShell)
                    artifactory.PushArtifact()

                    //上传制品
                    //nexus.main("nexus")
                }
            }
        }
        stage("BuildImage"){
            steps{
                script(
                    tool.PrintMes("Build Images and Push to ECR", "green")
                    
                    withDockerRegistry(credentialsId: 'ecr', url: '141816850656.dkr.ecr.ap-southeast-1.amazonaws.com/tomcat') {
                       sh """
                           aws --version
                           docker --version
                        
                          """

                    }
                )
            }
        }

       
    }
    post {
        always{
            script{
                println("always")
            }
        }
        
        success{
            script{
                println("success")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"success")
                }
                toemail.Email("流水线成功",userEmail)
            
            }
        
        }
        failure{
            script{
                println("failure")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
                }
                toemail.Email("流水线失败了！",userEmail)
            }
        }
        
        aborted{
            script{
                println("aborted")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
                }
               toemail.Email("流水线被取消了！",userEmail)
            }
        
        }
    
    }
}
